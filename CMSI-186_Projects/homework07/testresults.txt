"running TupleTestHarnesses for evaluation....." 
Test 01    : testing Tuple.IMPOSSIBLE.toString():
  Expecting: 'Impossible tuple': success
Test 02    : testing if Tuple.IMPOSSIBLE returns isImpossible():
  Expecting: 'true': success
Test 03    : testing if '<>' [empty Tuple] equals fakeImpossible.toString():
  Expecting: 'true': success
Test 04    : testing if fakeImpossible equals Tuple.IMPOSSIBLE:
  Expecting: 'true': success
Test 05    : testing if fakeImpossible returns isImpossible:
  Expecting: 'true': success
Test 06    : testing constructing '<>' [empty Tuple]:
  Expecting: 'true': success
Test 07    : testing constructing '<0>' [one-Tuple]:
  Expecting: 'true': success
Test 08    : testing constructing '<0,0>' [two-Tuple]:
  Expecting: 'true': success
Test 09    : testing constructing '<3,1,2>' [three-Tuple]:
  Expecting: 'true': success
Test 10    : testing constructing '<13,11,23,19,5,29>' [six-Tuple]:
  Expecting: 'true': success
Test 11    : testing constructing '<17,53,29,31,5,7,11,47,19,71>' [ten-Tuple]:
  Expecting: 'true': success
Test 12    : testing setting element zero of '<3,1,2>' [three-Tuple] to -1:
  currently: <3,1,2>
  Expecting: '<-1,1,2>': success
Test 13    : testing setting element one of '<-1,1,2>' [three-Tuple] to 0:
  currently: <-1,1,2>
  Expecting: '<-1,0,2>': success
Test 14    : testing setting element two of '<-1,0,2>' [three-Tuple] to 15:
  currently: <-1,0,2>
  Expecting: '<-1,0,15>': success
Test 15    : testing Tuple addition of '<-1,0,2>' to '<3,1,2>':
  currently: t0 is <-1,0,2>
  currently: t1 is <3,1,2>
  Expecting: Tuple sum is '<2,1,4>': success
Test 16    : testing Tuple equals 'some string object':
  Expecting: 'some string object': success
Test 17    : testing Tuple equals <-1.0>:
  Expecting: '<-1.0>': success
Test 18    : testing Tuple equals new Tuple(3):
  Expecting: t0 not equal new Tuple(3): success
Test 19    : testing Tuples are equal both ways:
  Expecting: t0.equals(t1) and t1.equals(t0) to be true: success
Test 20    : testing getElement zero of t0:
  Expecting: -1: success
Test 21    : testing getElement one of t0:
  Expecting: 0: success
Test 22    : testing getElement two of t0:
  Expecting: 2: success
Test 23    : testing length on empty Tuple:
  Expecting: length == 0: success
Test 24    : testing length on three-Tuple <-1,0,2>:
  Expecting: length == 3: success
Test 25    : testing length on '<13,11,23,19,5,29>' [six-Tuple]:
  Expecting: 'true': success
Test 26    : testing length on '<17,53,29,31,5,7,11,47,19,71>' [ten-Tuple]:
  Expecting: 'true': success
Test 27    : testing total on empty Tuple:
  Expecting: total == 0: success
Test 28    : testing total on three-Tuple <-1,0,2>:
  Expecting: total == 1: success
Test 29    : testing total on Tuple.IMPOSSIBLE:
  Expecting: total == 0: success
Test 30    : testing isImpossible on Tuple.IMPOSSIBLE:
  Expecting: true: success
Test 31    : testing isImpossible on Tuple <23,37,41>:
  Expecting: false: success
Test 32    : testing hashCode on Tuple.IMPOSSIBLE:
  Expecting: zero: success
Test 33    : testing hashCode on Tuple <23,37,41>:
  Expecting: 34891: success


Results: 33/33 tests passed.
. 
. 
"running DynamicChangemakerTestHarness for evaluation....." 


  TESTING CHANGEMAKER PROGRAM FUNCTIONALITY
  =========================================


  TESTING TO FIND OPTIMAL SOLUTION TO MAKING 99 cents USING US COINS
  ==================================================================

    Test01: testing optimal solution for 99 cents: 
      expecting Tuple: <3,2,0,4>: success

    Test02: testing that result using getElement(0): 
      expecting 3 25-cent coins: success

    Test03: testing that result using getElement(1): 
      expecting 2 10-cent coins: success

    Test04: testing that result using getElement(2): 
      expecting 0  5-cent coins: success

    Test05: testing that result using getElement(3): 
      expecting 4  1-cent coins: success

    Test06: testing optimal solution for 25789 cents: 
        note: expanded denominations including 50 cent and Susan B. Anthony dollar
      expecting Tuple: <257,1,1,1,0,4>: success


  TESTING TO FIND OPTIMAL SOLUTION USING NON-STANDARD DENOMINATIONS
  =================================================================

    Test07: testing optimal solution for 6 cents using [2, 3]: 
      expecting Tuple: <1,1>: success

    Test08: testing optimal solution for 13579 cents using [2, 3, 7, 5, 51, 29, 11]: 
      expecting Tuple: <1,0,0,0,266,0,1>: success

    Test09: testing optimal solution for 13579 cents using [17, 23, 121, 47, 3]: 
      expecting Tuple: <3,0,111,2,1>: failure


  TESTING TO FIND OPTIMAL SOLUTION TO MAKING 99 cents USING EUROS
  ===============================================================

    Test10: testing optimal solution for 99 cents: 
      expecting Tuple: <0,2,1,0,2,1>: success

    Test11: testing optimal solution for 88 cents: 
      expecting Tuple: <1,1,1,1,1,1>: success

    Test12: testing optimal solution for 176 cents: 
      expecting Tuple: <1,0,1,0,1,3>: success


  TESTING TO FIND OPTIMAL SOLUTION TO MAKING 99 cents USING FRANCS
  ================================================================

    Test13: testing optimal solution for 99 cents: 
      expecting Tuple: Impossible tuple: success

    Test14: testing optimal solution for 85 cents: 
      expecting Tuple: <1,1,1,1>: success

    Test15: testing optimal solution for 105 cents: 
      expecting Tuple: <1,0,0,2>: success

    Test16: testing optimal solution for 135 cents: 
      expecting Tuple: <1,1,1,2>: success
creating random tuple: <45,35,42,34,30,8,57>
creating random tuple: <50,67,55,22,60,47,25>


  TESTING TO RANDOM TUPLE GENERATION FOR THREE BOGUS DENOMINATION SETS
  ====================================================================

    Test 17: testing first list of bogus denomintaions, containing a negative......
          expecting: success: 
            and got: Cannot make change from a negative amount.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.

    Test 18: testing second list of bogus denomintaions, containing a zero......
          expecting: success: 
            and got: Cannot make change from a negative amount.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.

    Test 19: testing third list of bogus denomintaions, containing repeats......
          expecting: success: 
            and got: Duplicate denominations are present
Please enter a a comma-separated list with values you would like to make, followed by a total amount.


Results:
      15/16 tests passed.
. 
. 
. 
"running standalone programs to test extra credit operations" 
. 
"running java DynamicChangeMaker 8,13,4,9 14" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 2,3 5" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 2,3,7,5,51,29,11 13579" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 17,23,121,47,3 13579" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 1,7,9 12" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 11,13,17,19,23 1357911" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 23,19,17,13,11 1357911" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 3,1,9,8 14" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 3" 
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 3,12 -4" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 0,12,3 63" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
"running java DynamicChangeMaker 10,12,3,12 63" 
Denominations must all be integers greater than or equal to one.
Please enter a a comma-separated list with values you would like to make, followed by a total amount.
. 
. 
...........done.............. 
. 
